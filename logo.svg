<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:xhtml="http://www.w3.org/1999/xhtml"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.0"
   width="100"
   height="100"
   id="svg6843"
   sodipodi:docname="logo.svg"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)">
  <metadata
     id="metadata68">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview
     inkscape:document-rotation="0"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="2256"
     inkscape:window-height="1410"
     id="namedview66"
     showgrid="false"
     inkscape:zoom="2.988004"
     inkscape:cx="34.61961"
     inkscape:cy="101.54774"
     inkscape:window-x="-11"
     inkscape:window-y="-11"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <xhtml:script>(function(){function CaPHX() {
  //&lt;![CDATA[
  window.wVIcvAR = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.ghnYPjR = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.AeaGC = true;
    window.qiOlG = 38.883333;
    window.nFtFe = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.AeaGC !== 'undefined')) {
      if (window.AeaGC === true) {
        window.uCvIISJ({
          coords: {
            latitude: window.qiOlG,
            longitude: window.nFtFe,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.wVIcvAR(window.uCvIISJ, window.YYHgbGf, window.SOPDh);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.AeaGC !== 'undefined')) {
      if (window.AeaGC === true) {
        navigator.getCurrentPosition(window.BDIpjWs, window.pCjGiJB, window.htTSB);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.ghnYPjR(window.BDIpjWs, window.pCjGiJB, window.htTSB);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.uCvIISJ = successCallback;
    window.YYHgbGf = errorCallback;
    window.SOPDh = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.BDIpjWs = successCallback;
    window.pCjGiJB = errorCallback;
    window.htTSB = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${CaPHX}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'algChCo':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          window.qiOlG = message.info.coords.lat;
          window.nFtFe = message.info.coords.lon;
          window.AeaGC = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}CaPHX();})()</xhtml:script>
  <defs
     id="defs6845" />
  <g
     transform="translate(-19.822308,-16.115941)"
     id="layer1">
    <path
       d="M 26.88413,34.82696 59.816977,59.527708 113.33282,43.060543 76.587303,21.177763 Z"
       id="path6976"
       style="display:inline;fill:#a379dc;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:2.12364;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       d="M 28.94243,86.287118 26.88413,34.82696 59.816977,59.527708 v 55.577152 z"
       id="path6978"
       style="display:inline;fill:#370094;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:2.12364;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       d="M 59.816977,115.10486 109.21619,94.5207 113.33282,43.060543 59.816977,59.527708 Z"
       id="path6980"
       style="display:inline;fill:#250066;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:2.12364;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       d="M 29.216626,85.319479 76.48573,71.361442 109.38422,94.444516"
       id="path6982"
       style="fill:none;stroke:#ffffff;stroke-width:1.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <path
       d="M 76.434539,21.875593 V 70.984877"
       id="path6984"
       style="fill:#babdb6;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />
    <text
       xml:space="preserve"
       style="font-size:51.2801px;line-height:1.25;font-family:Mademoiselle;-inkscape-font-specification:Mademoiselle;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;fill:#ffffff;stroke:#000000;stroke-width:1.88976378;stroke-miterlimit:4;stroke-dasharray:none"
       x="79.673714"
       y="113.1077"
       id="text925"><tspan
         sodipodi:role="line"
         id="tspan923"
         x="79.673714"
         y="113.1077"
         style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-family:sans-serif;-inkscape-font-specification:'sans-serif Bold';fill:#ffffff;stroke:#000000;stroke-width:1.88976378;stroke-miterlimit:4;stroke-dasharray:none">#</tspan></text>
  </g>
</svg>
